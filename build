#!/bin/env python
# vim:ft=python

"""
-------------------------------------------------------------------------------
                             QUEST build script

    This script builds and installs the QUEST package. It can also build 
    third party libraries/dependencies such as boost and armadillo.

    For help, run ./build help
-------------------------------------------------------------------------------
"""

import os, sys, subprocess, shutil
import argparse, textwrap

ROOT            = os.path.dirname(os.path.realpath(__file__))
QUEST           = "quest"
BOOST           = "boost"
LAPACK          = "lapack"
ARPACK          = "arpack"
SUPERLU         = "superlu"
ARMADILLO       = "armadillo"
DEBUG           = "Debug"
RELEASE         = "Release"

def main ():
    opts = parse_args ()
    perform_action (opts)

def parse_args  ():
    # parse commandline arguments
    parser = argparse.ArgumentParser(
            usage="%(prog)s [options] command",
            description="This script builds and installs the QUEST package. It can also build third party libraries/dependencies such as boost and armadillo.",
            epilog="For more inforamtion, see project page at https://github.com/masumhabib/quest",
            formatter_class=argparse.RawTextHelpFormatter
    )
    
    parser.add_argument("-d", "--debug", action="store_true", 
            help="build QUEST with debug mode")
    parser.add_argument("-r", "--release", action="store_true", default=True,
            help="build QUEST with release mode")
    parser.add_argument("--doc", action="store_true", 
            help="build documentation")
    parser.add_argument("--boost", action="store_true", 
            help="build boost library from source")
    parser.add_argument("--blas", action="store_true", 
            help="build blas library from source")
    parser.add_argument("--lapack", action="store_true", 
            help="build lapack library from source")
    parser.add_argument("--arpack", action="store_true", 
            help="build arpack library from source")
    parser.add_argument("--superlu", action="store_true", 
            help="build superlu library from source")
    parser.add_argument("--armadillo", action="store_true", 
            help="build armadillo library from source")
    parser.add_argument("--dest", type=str, metavar="/path/to/destination",
            help="destination path where the action will be performed.")
    parser.add_argument("-n", "--num_cpus", type=int, metavar="num_cpus", default=8,
            help="number of CPUs that will be used for compilation")

    commands = parser.add_argument_group("commands") 
    commands.add_argument("command", type=str, nargs='?', default='make',
            choices=["config", "make", "install", "clean", "superclean", 
                     "test", "help"],
            
            help=textwrap.dedent(
'''command to execute: 
    config:           configure project using cmake.
    make:             build the project .
    clean:            clean compiled object files in the build folder.
    superclean:       delete build folder.
    test:             run tests.
    install:          install the project.
    help:             show this help message and exit.''')
            )

    args = parser.parse_args()

    if args.command == "help":
        parser.print_help ()
        exit (0)

    args.lib_dirs = {
            QUEST: ROOT
    }

    return args

def perform_action (opts = None):
    command = opts.command
    if command == "config":
        do_config (opts)
    elif command == "make":
        if is_config_needed (opts):
            do_config (opts)
        do_make (opts)
    elif command == "clean":
        if not is_config_needed (opts):
            do_clean (opts)
    elif command == "superclean":
        do_superclean (opts)
    elif command == "test":
        if get_lib_name (opts) == QUEST:
            if is_config_needed (opts):
                do_config (opts)
                do_make (opts)
            do_test (opts)
        else:
            print ("Command 'test' is not applicable for library " 
                    + get_lib_name (opts))
            exit (1)
    elif command == "install":
        if get_lib_name (opts) == QUEST:
            if is_config_needed (opts):
                do_config (opts)
                do_make (opts)
            do_install (opts)
        else:
            print ("Command 'test' is not applicable for library " 
                    + get_lib_name (opts))
            exit (1)
    else:
        print ("Uknown command " + command + ", run 'build -h' for usage details.")
        exit (1)

def do_config(opts):
    library = get_lib_name (opts)
    config = get_config (opts)
    build_dir = get_build_dir (opts)
    #print("DD> " + build_dir)

    cmake_opts = ""
    if library == QUEST:
        cmake_opts += " -DCMAKE_BUILD_TYPE=" + config + " ../../"
    else:
        cmake_opts += " ../"

    run_cmake (build_dir, cmake_opts)

def do_make(opts):
    library = get_lib_name (opts)
    config = get_config (opts)
    build_dir = get_build_dir (opts)

    make_opts = "-j " + str (opts.num_cpus)
    run_make (build_dir, make_opts)

def do_clean (opts):
    config = get_config (opts)
    build_dir = get_build_dir (opts)

    make_opts = "clean"
    run_make (build_dir, make_opts)

def do_superclean (opts):
    library = get_lib_name (opts)
    config = get_config (opts)

    if library == QUEST:
        dir_path = get_config_dir (config)
        print ("II> Deleting " + dir_path)
        shutil.rmtree (dir_path, ignore_errors = True)
    else:
        root = ROOT + "/third_party/" + library
        for dirname in ["build", "include", "lib", "lib64", "share"]:
            dir_path = root + "/" + dirname
            print ("II> Deleting " + dir_path)
            shutil.rmtree (dir_path, ignore_errors = True)
      
def do_test(opts):
    config = get_config (opts)
    build_dir = get_build_dir (opts)

    make_opts = "test ARGS=\"--output-on-failure --color_output=yes\"" 
    run_make (build_dir, make_opts)

def do_install (opts):
    config = get_config (opts)
    build_dir = get_build_dir (opts)
    install_dir = get_install_dir (opts)

    if len (install_dir) > 0:
        cmake_opts = " -DCMAKE_INSTALL_PREFIX:PATH=" + install_dir 
        run_cmake (build_dir, cmake_opts)

    make_opts = " install"
    run_make (build_dir, make_opts)

def run_cmake (build_dir, cmake_opts):
    if not os.path.exists (build_dir):
        os.makedirs (build_dir)

    current_dir = os.getcwd ()
    os.chdir (build_dir)

    command = "cmake " + cmake_opts 
    status = subprocess.call(command, shell=True)

    os.chdir (current_dir)

    if status != 0:
        raise RuntimeError ("CMake command '" + command + "' failed")

def run_make(build_dir, make_opts):
    current_dir = os.getcwd ()

    os.chdir (build_dir)
    command = "make " + make_opts 
    status = subprocess.call(command, shell=True)

    os.chdir (current_dir)

    if status != 0:
        raise RuntimeError ("Make command '" + command + "' failed")

def is_config_needed (opts):
    config = get_config (opts)
    build_dir = get_build_dir (opts)
    
    return not os.path.isfile (build_dir + "/Makefile")

def get_config (opts):
    if opts.debug:
        return DEBUG
    elif opts.release:
        return RELEASE
    else:
        raise RuntimeError ("Unknown config type")

def get_lib_name (opts):
    if opts.boost:
        return BOOST
    elif opts.armadillo:
        return ARMADILLO
    elif opts.lapack:
        return LAPACK
    elif opts.arpack:
        return ARPACK
    elif opts.superlu:
        return SUPERLU
    else:
        return QUEST

def get_config_dir (config):
    return ROOT + "/" + config 

def get_build_dir (opts):
    libname = get_lib_name (opts)

    if libname == QUEST:
        config = get_config (opts)
        return get_config_dir (config) + "/build"
    else:
        return ROOT + "/third_party/" + libname + "/build"

def get_install_dir (opts):
    return opts.dest 


""" 
Entry point 
"""
if __name__ == "__main__":
    sys.exit (main ())


