#!/bin/bash
# vim:ft=sh

# FileName: build
# Description: A build script that runs configures, builds and installs qmicad.
# 
# Copyright (C) 2014  K M Masum Habib <masum.habib@gmail.com>
#
# Created: 18 June 2014.

default_config="Release"  # Default configuration to build
default_command="make"    # By default, compile everything
ncpu="8"

function usage(){
    echo "Usage: build [debug|release] [config|test|doc|install|clean|superclean]"
    echo ""
    echo "  When no option is given, builds qmicad using make."
    echo ""
    echo "  Description of options: " 
    echo "    debug:            Build the debug version."
    echo "    release:          Build the release version."
    echo "    config:           Configures qmicad using cmake."
    echo "    test:             Runs tests."
    echo "    doc:              Build documentation."
    echo "    install [path]:   Installs qmicad."
    echo "    clean:            Cleans compiled object files in the build folder."
    echo "    superclean:       Deletes build folder."
    echo "    help:             Shows this message."
}

function get_build_dir() {
    local build_dir=$1/build
    echo $build_dir
}

is_config_needed () {
    local config=$1
    local build_dir=$(eval get_build_dir $config)
    if [[ -f $build_dir/Makefile ]]; then
        return 1
    else
        return 0
    fi
}

function do_config() {
    local config=$1
    local build_dir=$(eval get_build_dir $config)
    #echo "-D- $build_dir"
    mkdir -p $build_dir
    cd $build_dir && cmake -DCMAKE_BUILD_TYPE=$config ../../ && cd ../../
}

function do_make() {
    local config=$1
    local build_dir=$(eval get_build_dir $config)

    cd $build_dir && make -j $ncpu && cd ../../
}

function do_test() {
    local config=$1
    local build_dir=$(eval get_build_dir $config)

    cd $build_dir && make test ARGS="--output-on-failure --color_output=yes" && cd ../../
}

function do_make_doc() {
    local config=$1
    local build_dir=$(eval get_build_dir $config)

    cd $build_dir && make doc && cd ../../
}

function do_clean () {
    local config=$1
    local build_dir=$(eval get_build_dir $config)

    cd $build_dir && make clean && cd ../../
}

function do_superclean () {
    local config=$1
    echo "rm -rf $config"
    rm -rf $config
}

function do_install () {
    local config=$1
    local build_dir=$(eval get_build_dir $config)

    cd $build_dir && cmake -DCMAKE_INSTALL_PREFIX:PATH=$install_dir ../../ \
            && make install && cd ../../
}

config=$default_config
cmd=$default_command
install_path=""
while [[ $# -gt 0 ]]; do
    case $1 in 
        debug)
            config="Debug"
            ;;
        release)
            config="Release"
            ;;
        config|test|doc|clean|superclean)
            cmd=$1
            ;;
        install)
            cmd="install"
            shift
            if [[ $# -gt 0 ]]; then
                install_dir="$1"
            fi
            ;;
        *)
            usage
            exit 1
    esac
    shift
done

case $cmd in
    config)
        do_config $config
        ;;
    make)
        if is_config_needed $config; then
            do_config $config
        fi
        do_make $config
        ;;
    test)
        do_test $config
        ;;
    doc)
        do_make_doc $config
        ;;
    clean)
        do_clean $config
        ;;
    superclean)
        do_superclean $config
        ;;
    install)
        do_install "Release"
        ;;
    *)
        usage
esac
